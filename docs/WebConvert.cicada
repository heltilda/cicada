InFileName := "/Users/clark/Desktop/cicada/Help/CicadaHelp.tex"
OutFilePath := "/Users/clark/Desktop/cicada/WebPage/WebHelp/"
|url := "file:///Users/clark/Desktop/cicada/WebPage/WebHelp/"
url := "https://heltilda.github.io/cicada/"
update_date := "June 18, 2019"

|* SFLogo := "<a href=\"http://sourceforge.net/projects/yazoo\"><img src=\"http://sflogo.sourceforge.net/sflogo.php?group_id=148821&amp;type=13\" width=\"120\" height=\"30\" alt=\"Get Cicada scripting language at SourceForge.net. Fast, secure and Free Open Source software downloads\" /></a>"
piwiks := "<!-- Piwik -->\n<script type=\"text/javascript\">\nvar pkBaseURL = ((\"https:\" == document.location.protocol) ? \"https://sourceforge.net/apps/piwik/yazoo/\" : \"http://sourceforge.net/apps/piwik/yazoo/\");\ndocument.write(unescape(\"%3Cscript src='\" + pkBaseURL + \"piwik.js' type='text/javascript'%3E%3C/script%3E\"));\n</script><script type=\"text/javascript\">\npiwik_action_name = '';\npiwik_idsite = 1;\npiwik_url = pkBaseURL + \"piwik.php\";\npiwik_log(piwik_action_name, piwik_idsite, piwik_url);\n</script>\n<object><noscript><p><img src=\"http://sourceforge.net/apps/piwik/yazoo/piwik.php?idsite=1\" alt=\"piwik\"/></p></noscript></object>\n<!-- End Piwik Tag -->" *|

TEX_Help := load(InFileName)
TEX_text := TEX_Help[<find(TEX_Help, "\\section"), find(TEX_Help, "\\end{document}")+15>]
end_TEX := size(TEX_text)

notext := "#*(!*(#$)!"
if find(TEX_text, notext, 0) /= 0  then (  printl("Can't have notext in TEX_text"), throw(100)  )

Maths :: {
    { "x_i \\leftarrow \\frac1{1 + e^{-\\sum_j w_{ij} x_j - b_i}}",
      "<i>x<sub>i</sub></i> &nbsp;<--&nbsp; 1 / [ 1 + exp(-&sum;<i><sub>j</sub> w<sub>ij</sub> x<sub>j</sub> - b<sub>i</sub></i>) ]"  },
    { "w_{ij} &\\leftarrow w_{ij} + \\eta \\cdot x_i x_j\\\\\nb_i &\\leftarrow b_i + \\eta \\cdot x_i.",
      "<i>w<sub>ij</sub> &nbsp;<--&nbsp; w<sub>ij</sub> + &eta; &middot; x<sub>i</sub> x<sub>j</sub> <P>&nbsp;&nbsp;&nbsp; b<sub>i</sub> &nbsp;<--&nbsp; b<sub>i</sub> + &eta; &middot; x<sub>i</sub></i>" },
    { "* \\hspace{.1in} * \\hspace{.1in} *"
      "<P><center> *    *    *</center>" },
    { "flag &= (1 << 1 = 2) + (1 << 2 = 4) + (1 << 3 = 8) + (1 << 5 = 32)\\\\\n&= 46",
      "<i>flag</i> = (1 &lt;&lt; 1 = 2) + (1 &lt;&lt; 2 = 4) + (1 &lt;&lt; 3 = 8) + (1 &lt;&lt; 5 = 32)<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 46" },
    { "\\texttt{random()} = \\texttt{rand()}/\\texttt{RAND\\_MAX} + \\texttt{rand()}/(\\texttt{RAND\\_MAX})^2\\\\",
      "<tt>random()</tt> = <tt>rand()</tt>/<tt>RAND_MAX</tt> + <tt>rand()</tt>/(<tt>RAND_MAX</tt>)<sup>2</sup>" }
}

Dollars :: {
    { "x_i", "<i>x<sub>i</sub></i>" }, { "i", "<i>i</i>" }, { "W_{ij}", "<i>W<sub>ij</sub></i>" }, { "j", "<i>j</i>" }, { "w_{ij}", "<i>w<sub>ij</sub></i>" },
    { "b_i", "<i>b<sub>i</sub></i>" }, { "f", "<i>f</i>" }, { "\\eta", "&eta;" }, { "w_{ij} = w_{ji}", "<i>w<sub>ij</sub> = w<sub>ji</sub></i>" },
    { "2^{16}-1", "2<sup>16</sup>-1" }, { "-2^{15}", "-2<sup>15</sup>" }, { "2^{15}-1", "2<sup>15</sup>-1" }, { "2^{32}-1", "2<sup>32</sup>-1" },
    { "-2^{31}", "-2<sup>31</sup>" }, { "2^{31}-1", "2<sup>31</sup>-1" }, { "-10^{38}", "-10<sup>38</sup>" }, { "10^{38}", "10<sup>38</sup>" },
    { "N", "<i>N</i>" }, { "N+1", "<i>N</i>+1" }, { "N < 0", "<i>N</i> &lt; 0" }, { "n", "<i>n</i>" },
    { "a", "<i>a</i>" }, { "b", "<i>b</i>" },
    { "\\left<\\textrm{enter}\\right>", "&lt;enter&gt;" }, { "\\left<\\textrm{return}\\right>", "&lt;return&gt;" },
    { "x = 0 + x", "<i>x</i> = 0 + <i>x</i>" }, { "\\texttt{a} \\longrightarrow \\texttt{b}", "<tt>a</tt> ---> <tt>b</tt>" }, { "\\sim", "~" },
    { "\\pi", "pi" }, { "\\pi/2", "pi/2" }, { "-\\pi/2", "-pi/2" }, { "e", "<i>e</i>" }, { "1-N", "1-<i>N</i>" }, { "\\pm \\infty", "plus/minus infinity" }
}

refs :: {
    { "arrayElementOrder", "1" }, { "aliases", "2" }, { "searchPaths", "3" },
    { "types_table", "1" }, { "OoO_table", "2" }, { "defineFlagsTable", "3" }, { "built_in_IDs", "4" },
        { "errCodeTable", "5" }   }

Pages :: { toc :: [1] string }
Pages[1][1] = "<P><P><HTML>\n\n<HEAD>\n<TITLE>Cicada Help</TITLE>\n\n<H1> <CENTER> Cicada Help </CENTER> </H1>\n</HEAD>\n\n<BODY>\n\n"

PageNames :: PageTitles :: [1] string
PageNames[1] = "toc", PageTitles[1] = "Table of Contents"
PagesNum := 1

Lookup :: {
    LU_counter :: int
    
    code
    
    for LU_counter in <1, top(args[1])>  (
    if args[1][LU_counter][1] == args[2]  then (
        Add(args[1][LU_counter][2])
        LU_counter = top(args[1])+100
    ))
    
    if LU_counter < top(args[1])+100  then (
        printl("Unknown lookup expression:  '", args[2], "'")
        throw(100)      )
}

NewPage :: {
    page_name :: page_title :: string
    cmd_pos :: int
    
    code
    
    PagesNum = that+1
    root.Pages[PagesNum] :: [] string
    root.PageNames[^PagesNum]
    root.PageTitles[^PagesNum]
    
    PageTitles[PagesNum] = args[1]
    
    if secnum > 9 or ssecnum > 9 or sssecnum > 9  then (
        printl("Error: more than 9 sections causes naming problems (", secnum, " ", ssecnum, " ", sssecnum, ")")
        throw(100)      )
    
    print_string(page_name, "help_", secnum)
    if ssecnum /= 0  then (
        print_string(page_name, page_name, ssecnum)
        if sssecnum /= 0  then &
            print_string(page_name, page_name, sssecnum)
        else  ssecpage = page_name      )
    
    else  secpage = page_name
    
    PageNames[PagesNum] = page_name
    
    if PagesNum > 2  then (
    if size(PageNames[PagesNum-1]) < size(page_name)  then &
        Add("<ul>"; page = 1)
    else if size(PageNames[PagesNum-1]) > size(page_name)  then (
        if size(PageNames[PagesNum-1]) - size(page_name) == 1  then &
            Add("</ul>"; page = 1)
        else  Add("</ul></ul>"; page = 1)
    ))
    Add("<li><a href=\"", url, page_name, ".html\">", args[1], "</a>\n"; page = 1)

    if PagesNum > 2  then &
        Add("<a href=\"", url, page_name, ".html\">Next: ", args[1], "</a>\n"; page = PagesNum-1, strID = top(Pages[page]))
    
    page_title = args[1]
    cmd_pos = find(page_title, "<")
    while cmd_pos /= 0  do (
        endStr := ""
        if find(page_title, ">", 1, cmd_pos+1) < top(page_title)  then &
            endStr = page_title[<find(page_title, ">", 1, cmd_pos+1)+1, top>]
        print_string(page_title, page_title[<1, cmd_pos-1>], endStr)
        cmd_pos = find(page_title, "<")     )
    
    Add("<HTML>\n\n<HEAD>\n<TITLE>Cicada Help: ", page_title, "</TITLE>\n\n",
        "<a href=\"", url, "index.html\">Cicada</a> ---> <a href=\"", url, "toc.html\">Online Help Docs</a>")
    if ssecnum /= 0  then Add(" ---> ", "<a href=\"", url, secpage, ".html\">", sec_name, "</a>")
    if sssecnum /= 0  then Add(" ---> ", "<a href=\"", url, ssecpage, ".html\">", ssec_name, "</a>")
    Add("\n\n<", args[2], "> <CENTER> ", args[1], " </CENTER> </", args[2], ">\n</HEAD>\n\n<BODY>\n\n")
}

EndPage :: {

    code
    
    if ssecnum == 0  then (
        Add("<ul>\n"), Add("</ul>")
        { secpagenum, secstringnum } = { PagesNum, top(Pages[PagesNum]) }       )
    else if sssecnum == 0  then (
        Add("<ul>\n"), Add("</ul>")
        { ssecpagenum, ssecstringnum } = { PagesNum, top(Pages[PagesNum]) }     )

    if PagesNum > 1  then (
        Add("<br><P><div align=\"center\"><a href=\"", url, PageNames[PagesNum-1], ".html\">Prev: ", PageTitles[PagesNum-1], "</a> &nbsp;&nbsp;\n")
        Add("</div><br><br><P>Last update: ", update_date)
        |* Add("\n\n<P> ", SFLogo, "\n\n", piwiks)  *|    )
}

Add :: {
    params :: { page :: strID :: int }
    
    code
    
    if level > 1  then (
        print_string(args_string[level-1], args_string[level-1], args)
        return      )
    
    params.page = PagesNum
    params.strID = 0

    (params<<args)()

    if params.strID == 0  then &
        params.strID = top(Pages[params.page])+1
    
    Pages[params.page][+params.strID] =! args
}

Match :: {
    word_size :: int
    word :: string
    
    code
    
    word_size = size(args[1])
    if pos+word_size-1 > end_TEX  then return false
    word = TEX_text[<pos, pos+word_size-1>]
    
    if word == args[1]  then return true
    return false
}

sec_name :: ssec_name :: sssec_name :: string
secnum := ssecnum := sssecnum := 0
secpage := ssecpage := ""
secpagenum := secstringnum := ssecpagenum := ssecstringnum := 0
verbatim := 0

pos := 1
level := 0
bf := false

gen_marks := { "\n\n", "\\", "$", "&", "{", "}", "<", ">", notext, "``", "`", "'", "\"", notext, "%" }
verb_marks := { "\n", notext, notext, "&", notext, "\\end{verbatim}", "<", ">", "\"", notext, notext, notext, notext, "  ", notext }
(marks :: *) =@ gen_marks
marks_num := top(marks)

args_string :: [] string

PrintPage :: {
    c1 :: low :: high :: int
    
    code
    
    if top(args) == 1  then (
        low = 1
        high = PagesNum     )
    else if top(args) == 2  then &
        low = high = args[2]
    else  (
        low = args[2]
        high = args[3]      )

    for c1 in <low, high>
        print(c1, ": '", Pages[args[1]][c1], "'\n")
}
debug_on := false

scan :: {
    next_mark :: [marks_num] int
    mark :: text_end :: c1 :: end_expr :: int
    table_mode := 0

    GetArg :: {        
        code
                
        pos = find(TEX_text, "{", 1, pos)+1
        (newscan::scan)()
    
        return args_string[level]
    }
    
    ClearMarks :: {
        c1 :: int
        
        code
        
        next_mark[<1, marks_num>] = -1
    }
    
    code

    if level > 0  then (
        args_string[^level]
        args_string[level] = ""     )
    level = that+1

	ClearMarks()

    mark = 0
    while pos < end_TEX and mark /= 6  do (
        
        mark = 0
        text_end = end_TEX+1
        for c1 in <1, marks_num>  (
            if pos > next_mark[c1] and next_mark[c1] /= 0  then &
                next_mark[c1] = find(TEX_text, marks[c1], 1, pos)
            if next_mark[c1] < text_end and next_mark[c1] > 0  then (
                mark = c1
                text_end = next_mark[c1]
        )   )
        
        if pos <= text_end-1  then Add(TEX_text[<pos, text_end-1>])
        pos = text_end+1
        
        if mark == 1  then (            | paragraph

            if verbatim == 1  then &
                Add("\n\n<br>&nbsp;&nbsp;&nbsp; ")
            else if verbatim == 2  then &
                Add("\n\n<br> ")
            else  (
                Add("\n\n<P> ")
                while find(TEX_text, "\n", 1, pos) == pos  do (
                    pos = that+1
                    if pos > end_TEX  then return
        )   )   )
    
        else if mark == 3  then (    | dollar
            
            end_expr = find(TEX_text, "$", 1, pos)
            Lookup(Dollars, TEX_text[<pos, end_expr-1>])
    
            pos = end_expr + 1      )
        
        else if mark == 4  then (    | ampersand
        
            if table_mode == 0  then Add("&amp;")
            else  (
                back := pos-1, let :: string
                loop  (  back = that-1, let = TEX_text[<back, back>]  )  until let /= " "
                if let == "\n" or let == "&"  then Add("&nbsp;</td><td>")
                else  Add("</td><td>")
        )   )
            
        else if mark == 5  then (    | '{'
        
            pos = that-1
            Add(GetArg())       )
        
        else if mark == 7  then &
        
            Add("&lt;")
    
        else if mark == 8  then &
        
            Add("&gt;")
    
        else if mark == 9  then &
        
            Add("&quot;")
    
        else if mark == 10  then (
        
            Add("&ldquo;")
            pos = that+1        )
    
        else if mark == 11  then &
        
            Add("&lsquo;")
    
        else if mark == 12  then &
        
            Add("&rsquo;")
    
        else if mark == 13  then &
        
            Add("&rdquo;")
    
        else if mark == 14  then &
        
            while find(TEX_text, " ", 1, pos) == pos  do (  pos = that+1, Add("&nbsp;")  )
    
        else if mark == 15  then &
        
            pos = find(TEX_text, "\n", 1, pos)
    
        else if mark == 2  then (
        
            if Match("section")  then (
            
                EndPage()
                
                sec_name = GetArg()
                secnum = that+1, ssecnum = sssecnum = 0

                printl("Section:  ", sec_name)
                NewPage(sec_name, "H1")     )
        
            else if Match("subsection")  then (
            
                EndPage()
                
                ssec_name = GetArg()
                ssecnum = that+1, sssecnum = 0

                printl("  subsection:  ", ssec_name)
                NewPage(ssec_name, "H1")
                Add("<li><a href=\"", url, NewPage.page_name, ".html\">", ssec_name, "</a>\n"; page = secpagenum, strID = secstringnum)
                secstringnum = that + 1     )
        
            else if Match("subsubsection")  then (
            
                EndPage()
                
                sssec_name = GetArg()
                sssecnum = that+1

                printl("  - subsubsection:  ", sssec_name)
                NewPage(sssec_name, "H1")
                Add("<li><a href=\"", url, NewPage.page_name, ".html\">", sssec_name, "</a>\n"; page = ssecpagenum, strID = ssecstringnum)
                ssecstringnum = that + 1        )
    
            else if Match("paragraph")  then (
            
                bf = true
                Add("\n\n<br><P><b>", GetArg())
                Add("</b>\n<P>")
                bf = false      )
            
            else if Match("_") or Match("#") or Match("&") or Match("^")  then ()
            
                | do nothing -- it will continue on as before and skip the '\'
            
            else if Match("{")  then (
            
                Add("{")			| can't trust the converter to process this correctly
                pos = that+1        )
                
            else if Match("}")  then (
            
                Add("}")			| can't trust the converter to process this correctly
                pos = that+1        )
                
            else if Match("\\")  then (        | the first backslash was already taken into account
            
                pos = that+1
                
                if table_mode == 0  then Add("<P>")
                else  (
                    back := pos-2, let :: string
                    loop  (  back = that-1, let = TEX_text[<back, back>]  )  until let /= " "
                    if let == "\n" or let == "&"  then Add("&nbsp;</td></tr><tr><td>")
                    else  Add("</td></tr><tr><td>")
            )   )
                
            else if Match("begin{code}") or Match("begin{longcode}")  then (
            
                if Match("begin{code}")  then verbatim = 1      | only indent for short codes
                else  verbatim = 2
                pos = find(TEX_text, "\\begin{verbatim}", 1, pos) + 16

                verb_marks[6] = "\\end{verbatim}"
                marks = @verb_marks
                ClearMarks()

                (newscan::scan)()
                marks = @gen_marks
                ClearMarks()

                Add("\n\n<P><P><tt> ", args_string[level], "</tt>\n\n<P>")
                
                if verbatim == 1  then &
                    pos = find(TEX_text, "\\end{code}", 1, pos) + 10
                else  &
                    pos = find(TEX_text, "\\end{longcode}", 1, pos) + 14
                
                verbatim = 0        )
            
            else if Match("verb")  then (
            
                verb_marks[6] = TEX_text[<pos+4, pos+4>]
                marks = @verb_marks
                ClearMarks(), verbatim = 1

                pos = that+5
                (newscan::scan)()
                marks = @gen_marks
                ClearMarks(), verbatim = 0

                Add("<tt>", args_string[level], "</tt>")        )
            
            else if Match("begin{align*}")  then (
            
                maths_counter :: int
                
                Add("\n\n<br><P>&nbsp;&nbsp;&nbsp;")
                GetArg()
                Lookup(Maths, TEX_text[<pos+1, find(TEX_text, "\\end{align*}", 1, pos)-2>])
    
                pos = find(TEX_text, "\\end{align*}", 1, pos)
                GetArg()        )
            
            else if Match("begin{figure}")  then (
            
                fig_name :: fig_label :: fig_caption :: string
                
                pos = find(TEX_text, "\\", 1, pos)
                while not Match("\\end{figure}")  do (
                    if Match("\\includegraphics")  then fig_name = GetArg()
                    else if Match("\\caption")  then fig_caption = GetArg()
                    else if Match("\\label")  then fig_label = GetArg()
                    else  pos = that+1
                    pos = find(TEX_text, "\\", 1, pos)      )
                GetArg()
                
                Add("<br><center><div class=\"image\"><img src=\"", url, fig_name, ".jpg\"<div><br><br>")
                for (figID :: int) in <1, top(refs)>  (
                if refs[figID][1] == fig_label  then (
                    Add("Figure ", refs[figID][2], ":  ")
                ))
                
                Add(fig_caption, "</div></div></center><br>")       )
    
            else if Match("begin{table}")  then (

                tbl_label :: tbl_caption :: string
            
                Add("\n\n<br><center><div><P><table border=\"1\"><tr><td>")
                
                pos = find(TEX_text, "\\begin{tabular}", 1, pos)
                GetArg(), GetArg()
                
                table_mode = 2      )

            else if Match("begin{tabular}")  then (

                Add("\n\n<br><table border=\"1\"><tr><td>")
                
                GetArg(), GetArg()
                
                table_mode = 1      )
    
            else if Match("end{tabular}")  then (
                
                last_page_idx := top(Pages[PagesNum])
                loop  (
                    last_page_str := @Pages[PagesNum][last_page_idx]
                    last_page_idx = that - 1
                )  until last_page_str /= "\n"
                if find(last_page_str, "<tr><td>", -1) == size(last_page_str)-7  then &
                    last_page_str = that[<1, size(last_page_str)-8>]
                
                Add("</table>")
    
                if table_mode == 2  then (
                    while not Match("\\end{table}")  do (
                        if Match("\\caption")  then tbl_caption = GetArg()
                        else if Match("\\label")  then tbl_label = GetArg()
                        else  pos = that+1
                        pos = find(TEX_text, "\\", 1, pos)      )

                    for (tblID :: int) in <1, top(refs)>  (
                    if refs[tblID][1] == tbl_label  then (
                        Add("<div>Table ", refs[tblID][2], ":  ")
                    ))
                    
                    Add(tbl_caption, "</div></div></center><br>")
                    pos = find(TEX_text, "\\end{table}", 1, pos)        )
                
                GetArg()
                
                table_mode = 0      )
            
            else if Match("begin{description}")  then (
            
                GetArg()
                Add("<ul>")     )

            else if Match("end{description}")  then (

                GetArg()
                Add("</ul>")        )

            else if Match("begin{center}")  then (
            
                GetArg()
                Add("<div align=\"center\">")       )

            else if Match("end{center}")  then (
            
                GetArg()
                Add("</div>")       )

            else if Match("item")  then (

                Add("<li>", GetArg())       )

            else if Match("ref")  then (
            
                Lookup(refs, GetArg())
                
                if find(TEX_text, " on page \\pageref", 1, pos) == pos  then (
                    GetArg()
            )   )
            
            else if Match("footnote")  then (
            
                Add(" (", GetArg(), ")")        )
            
            else if Match("emph") or Match("textit")  then &
            
                Add("<i>", GetArg(), "</i>")
            
            else if Match("underline")  then &
            
                Add("<u>", GetArg(), "</u>")
            
            else if Match("bf")  then (
            
                Add("<b>")
                pos = that+2
                bf = true       )
            
            else if Match("texttt") or Match("textrm")  then (
            
                Add("<tt>", GetArg(), "</tt>")      )
            
            else if Match("normalfont")  then (
            
                if bf  then (
                    Add("</b>")
                    bf = false      )
                pos = that + 10     )

            else if Match("small")  then (
            
|                Add("<small>")
                pos = that+5        )
            
            else if Match("normalsize")  then (
            
|                Add("</small>")
                pos = that+10       )
            
            else if Match("noindent")  then &
            
                pos = that + 8
            
            else if Match("checkmark")  then (
            
                Add("X")
                pos = that + 9      )

            else if Match("`a")  then (
            
                Add("&agrave;")
                pos = that + 2      )
    
            else if Match("hline")  then &
            
                pos = that+5
    
            else if Match("cline")  then &
            
                GetArg()
                
            else if Match("newpage")  then &
            
                pos = that+7
            
            else if Match("index")  then &
            
                GetArg()
            
            else if Match("vspace")  then &
            
                GetArg()
            
            else if Match("addcontentsline")  then (
            
                GetArg(), GetArg(), GetArg()        )
            
            else if Match("printindex")  then &
            
                pos = that+10
            
            else if Match("end{document}")  then (
            
                GetArg()        )
            
            else  (
                printl("Unknown command:  ", TEX_text[<pos, pos+10>])
                throw(100)
    )   )   )
    
    if bf  then (
        Add("</b>")
        bf = false      )
    
    level = that-1
}


scan()
Add("</ul>"; page = 1)
if ssecnum /= 0   then Add("</ul>"; page = 1)
if sssecnum /= 0  then Add("</ul>"; page = 1)

EndPage()
Add("<div align=\"center\"><a href=\"", url, PageNames[2], ".html\">Next: ", PageTitles[2], "</a></div>\n"; page = 1)
Add("</div><br><br><P>Last update: ", update_date; page = 1)
| Add("\n\n<P> ", SFLogo, "\n\n", piwiks; page = 1)

page_counter :: int
total_page :: outfile_name :: string
for page_counter in <1, PagesNum>  (
    print_string(total_page, Pages[page_counter])
    print_string(outfile_name, OutFilePath, PageNames[page_counter], ".html")
    save(outfile_name, total_page)      )
